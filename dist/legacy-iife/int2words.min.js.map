{"version":3,"file":"int2words.min.js","sources":["../esm/lang/util/isValidInput.js","../esm/lang/util/chunkDigits.js","../esm/lang/japanese.js","../esm/lang/english.js"],"sourcesContent":["export class CoercionError extends Error {\n    constructor(message) {\n        super(message);\n        this.name = 'CoercionError';\n    }\n}\nexport default function isValidInput(input, throwError) {\n    const notValid = makeNotValid(throwError);\n    if (typeof input === 'string') {\n        if (input === '')\n            return notValid('Expected a non-empty string.');\n        if (isNaN(Number(input)))\n            return notValid('Failed to extract number.');\n        return isValidNumber(Number(input), notValid);\n    }\n    if (typeof input === 'number') {\n        return isValidNumber(input, notValid);\n    }\n    return notValid('Expected a string or number.');\n}\nfunction isValidNumber(input, notValid) {\n    if (!Number.isInteger(input))\n        return notValid('Expected an integer.');\n    if (input < 0)\n        return notValid('Expected a positive integer.');\n    if (input > Number.MAX_SAFE_INTEGER)\n        return notValid(`Integers greater than ${Number.MAX_SAFE_INTEGER} not supported.`);\n    return true;\n}\nfunction makeNotValid(throwError) {\n    return function notValid(message) {\n        const error = new CoercionError(message);\n        if (throwError) {\n            throw error;\n        }\n        else {\n            console.error(error.toString());\n            return false;\n        }\n    };\n}\n//# sourceMappingURL=isValidInput.js.map","/**\n * Chunk integer into groups of digits of given length starting from the least\n * significant digit and padded with zeroes if necessary.\n *\n * Chunk `54321` into 4 → `[[4, 3, 2, 1], [0, 0, 0, 5]]`;\n */\nexport function toChunks(integer, targetLength) {\n    const chunks = [];\n    const reversedDigits = String(integer).split('').reverse();\n    for (let index = 0;; index += targetLength) {\n        const reversedChunk = reversedDigits.slice(index, index + targetLength);\n        const chunk = reversedChunk.reverse();\n        if (chunk.length === targetLength) {\n            chunks.push(toChunkDigits(chunk));\n        }\n        else {\n            if (chunk.length > 0) {\n                const pad = Array(targetLength - chunk.length).fill('0');\n                const paddedChunk = [...pad, ...chunk];\n                chunks.push(toChunkDigits(paddedChunk));\n            }\n            break;\n        }\n    }\n    return chunks;\n}\n/**\n * Convert `[\"1\", \"2\", \"3\"]` → `[1, 2, 3]`.\n */\nfunction toChunkDigits(chunk) {\n    return chunk.map(s => Number(s));\n}\n//# sourceMappingURL=chunkDigits.js.map","import isValidInput, {} from './util/isValidInput.js';\nimport { toChunks } from './util/chunkDigits.js';\nconst CHAR = ['', '一', '二', '三', '四', '五', '六', '七', '八', '九'];\nconst SMALL_POWER = ['', '十', '百', '千'];\nconst LARGE_POWER = ['', '万', '億', '兆', '京', '垓', '𥝱', '穣'];\nconst defaultOptions = {\n    throwError: false,\n};\n/**\n * Convert integer into a Japanese number phrase.\n *\n * Input       | Output   | Note\n * -----------:|----------|:----\n * `0`         | `零`     |\n * `1`         | `一`     |\n * `10`        | `十`     |\n * `20`        | `二十`   |\n * `1,0000`    | `一万`   | *\n * `1000,0000` | `一千万` | **\n *\n * *Starting at 万, numbers begin with 一 if no digit would otherwise precede.\n * **If 千 directly precedes powers of 万 or above, 一 is prefixed before 千.\n * @see https://en.wikipedia.org/wiki/Japanese_numerals#Large_numbers\n */\nexport default function int2ja(input, options = defaultOptions) {\n    if (!isValidInput(input, options.throwError))\n        return '';\n    const integer = Number(input);\n    const quads = toChunks(integer, 4);\n    const quadPhrases = quads.map(quad => toQuadPhrase(quad));\n    return joinQuadPhrases(quadPhrases);\n}\n/**\n * Convert quad-digits to a place value phrase.\n *\n * Quad   | Phrase\n * -------|-----------------\n * `0000` | \"\"\n * `0001` | \"一\"\n * `1000` | \"千\"\n * `1111` | \"千百十一\"\n * `1121` | \"千百二十一\"\n * `1321` | \"千三百二十一\"\n * `4321` | \"四千三百二十一\"\n */\nfunction toQuadPhrase(quad) {\n    const [digit4, digit3, digit2, digit1] = quad;\n    const word4 = toWord(digit4, 4);\n    const word3 = toWord(digit3, 3);\n    const word2 = toWord(digit2, 2);\n    const word1 = toWord(digit1, 1);\n    return `${word4}${word3}${word2}${word1}`;\n}\nfunction toWord(digit, place) {\n    const placeIndex = place - 1;\n    if (placeIndex === 0)\n        return CHAR[digit];\n    if (digit === 0)\n        return '';\n    if (digit === 1)\n        return SMALL_POWER[placeIndex];\n    return CHAR[digit] + (SMALL_POWER[placeIndex]);\n}\n/**\n * Add power words to triplet phrases and join.\n *\n *  Input       | Output\n *  :-----------|:--------\n * `[\"一\"]`     | \"一\"\n * `[\"\", \"一\"]` | \"一万\"\n * `[\"\", \"千\"]` | \"一千万\"\n */\nfunction joinQuadPhrases(phrases) {\n    let joinedPhrase = '';\n    phrases.forEach((phrase, index) => {\n        /**\n         * The valid integer range is significantly smaller than the largest power\n         * word.\n         */\n        // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n        const powerWord = LARGE_POWER[index];\n        if (powerWord !== '' && phrase === '千') {\n            joinedPhrase = '一' + phrase + powerWord + joinedPhrase;\n        }\n        else {\n            joinedPhrase = phrase + powerWord + joinedPhrase;\n        }\n    });\n    return joinedPhrase || '零';\n}\n//# sourceMappingURL=japanese.js.map","import isValidInput, {} from './util/isValidInput.js';\nimport { toChunks } from './util/chunkDigits.js';\nconst ONES = [\n    '', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight', 'nine', 'ten',\n    'eleven', 'twelve', 'thirteen', 'fourteen', 'fifteen', 'sixteen', 'seventeen', 'eighteen', 'nineteen'\n];\nconst TENS = [\n    '', '', 'twenty', 'thirty', 'forty', 'fifty', 'sixty', 'seventy', 'eighty', 'ninety'\n];\nconst POWER = [\n    '', 'thousand', 'million', 'billion', 'trillion', 'quadrillion', 'quintillion', 'sextillion', 'septillion', 'octillion',\n    'nonillion'\n];\nconst defaultOptions = {\n    throwError: false,\n};\n/**\n * Convert integer into an English number phrase.\n *\n * Input | Output\n * ------|-------------\n * `0`   | `zero`\n * `1`   | `one`\n * `11`  | `eleven`\n * `21`  | `twenty-one`\n */\nexport default function int2en(input, options = defaultOptions) {\n    if (!isValidInput(input, options.throwError))\n        return '';\n    const integer = Number(input);\n    const triplets = toChunks(integer, 3);\n    const tripletPhrases = triplets.map(triplet => toTripletPhrase(triplet));\n    return joinTripletPhrases(tripletPhrases);\n}\n/**\n * Convert triplet-digits to a place value phrase.\n *\n * Triplet | Phrase\n * --------|:--------------------------\n * `001`   | \"one\"\n * `011`   | \"eleven\"\n * `021`   | \"twenty-one\"\n * `301`   | \"three hundred one\"\n * `311`   | \"three hundred eleven\"\n * `321`   | \"three hundred twenty-one\"\n */\nfunction toTripletPhrase(triplet) {\n    const [digit3, digit2, digit1] = triplet;\n    const phrase = [];\n    if (digit3 !== 0) {\n        phrase.push(`${ONES[digit3]} hundred`);\n    }\n    switch (digit2) {\n        case 0:\n            if (digit1 !== 0) {\n                phrase.push(ONES[digit1]);\n            }\n            break;\n        case 1:\n            phrase.push(ONES[10 + digit1]);\n            break;\n        default:\n            if (digit1 === 0) {\n                phrase.push(TENS[digit2]);\n            }\n            else {\n                phrase.push(`${TENS[digit2]}-${ONES[digit1]}`);\n            }\n            break;\n    }\n    return phrase.join(' ');\n}\n/**\n * Add power words to triplet phrases and join.\n *\n *  Input           | Output\n *  :---------------|:------------------\n * `[\"\", \"one\"]`    | \"one thousand\"\n * `[\"one\", \"one\"]` | \"one thousand one\"\n */\nfunction joinTripletPhrases(phrases) {\n    const joinedPhrase = [];\n    phrases.forEach((phrase, index) => {\n        if (phrase === '')\n            return;\n        /**\n         * The valid integer range is significantly smaller than the largest power\n         * word.\n         */\n        // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n        const powerWord = POWER[index];\n        const phraseWithPowerWord = (powerWord === '') ? phrase : `${phrase} ${powerWord}`;\n        joinedPhrase.push(phraseWithPowerWord);\n    });\n    return joinedPhrase.reverse().join(' ') || 'zero';\n}\n//# sourceMappingURL=english.js.map"],"names":["CoercionError","Error","constructor","message","super","this","name","isValidInput","input","throwError","notValid","error","console","toString","makeNotValid","isNaN","Number","isValidNumber","isInteger","MAX_SAFE_INTEGER","toChunks","integer","targetLength","chunks","reversedDigits","String","split","reverse","index","chunk","slice","length","paddedChunk","Array","fill","push","toChunkDigits","map","s","CHAR","SMALL_POWER","LARGE_POWER","defaultOptions","int2ja","arguments","undefined","phrases","joinedPhrase","forEach","phrase","powerWord","joinQuadPhrases","quad","digit4","digit3","digit2","digit1","word4","toWord","word3","word2","word1","toQuadPhrase","digit","place","placeIndex","ONES","TENS","POWER","phraseWithPowerWord","join","joinTripletPhrases","triplet","toTripletPhrase"],"mappings":"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"}