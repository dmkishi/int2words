{"version":3,"file":"int2words.js","sources":["../esm/lang/util/isValidInput.js","../esm/lang/util/chunkDigits.js","../esm/lang/japanese.js","../esm/lang/english.js"],"sourcesContent":["export class CoercionError extends Error {\n    constructor(message) {\n        super(message);\n        this.name = 'CoercionError';\n    }\n}\nexport default function isValidInput(input, throwError) {\n    const notValid = makeNotValid(throwError);\n    if (typeof input === 'string') {\n        if (input === '')\n            return notValid('Expected a non-empty string.');\n        if (isNaN(Number(input)))\n            return notValid('Failed to extract number.');\n        return isValidNumber(Number(input), notValid);\n    }\n    if (typeof input === 'number') {\n        return isValidNumber(input, notValid);\n    }\n    return notValid('Expected a string or number.');\n}\nfunction isValidNumber(input, notValid) {\n    if (!Number.isInteger(input))\n        return notValid('Expected an integer.');\n    if (input < 0)\n        return notValid('Expected a positive integer.');\n    if (input > Number.MAX_SAFE_INTEGER)\n        return notValid(`Integers greater than ${Number.MAX_SAFE_INTEGER} not supported.`);\n    return true;\n}\nfunction makeNotValid(throwError) {\n    return function notValid(message) {\n        const error = new CoercionError(message);\n        if (throwError) {\n            throw error;\n        }\n        else {\n            console.error(error.toString());\n            return false;\n        }\n    };\n}\n//# sourceMappingURL=isValidInput.js.map","/**\n * Chunk integer into groups of digits of given length starting from the least\n * significant digit and padded with zeroes if necessary.\n *\n * Chunk `54321` into 4 → `[[4, 3, 2, 1], [0, 0, 0, 5]]`;\n */\nexport function toChunks(integer, targetLength) {\n    const chunks = [];\n    const reversedDigits = String(integer).split('').reverse();\n    for (let index = 0;; index += targetLength) {\n        const reversedChunk = reversedDigits.slice(index, index + targetLength);\n        const chunk = reversedChunk.reverse();\n        if (chunk.length === targetLength) {\n            chunks.push(toChunkDigits(chunk));\n        }\n        else {\n            if (chunk.length > 0) {\n                const pad = Array(targetLength - chunk.length).fill('0');\n                const paddedChunk = [...pad, ...chunk];\n                chunks.push(toChunkDigits(paddedChunk));\n            }\n            break;\n        }\n    }\n    return chunks;\n}\n/**\n * Convert `[\"1\", \"2\", \"3\"]` → `[1, 2, 3]`.\n */\nfunction toChunkDigits(chunk) {\n    return chunk.map(s => Number(s));\n}\n//# sourceMappingURL=chunkDigits.js.map","import isValidInput, {} from './util/isValidInput.js';\nimport { toChunks } from './util/chunkDigits.js';\nconst CHAR = ['', '一', '二', '三', '四', '五', '六', '七', '八', '九'];\nconst SMALL_POWER = ['', '十', '百', '千'];\nconst LARGE_POWER = ['', '万', '億', '兆', '京', '垓', '𥝱', '穣'];\nconst defaultOptions = {\n    throwError: false,\n};\n/**\n * Convert integer into a Japanese number phrase.\n *\n * Input       | Output   | Note\n * -----------:|----------|:----\n * `0`         | `零`     |\n * `1`         | `一`     |\n * `10`        | `十`     |\n * `20`        | `二十`   |\n * `1,0000`    | `一万`   | *\n * `1000,0000` | `一千万` | **\n *\n * *Starting at 万, numbers begin with 一 if no digit would otherwise precede.\n * **If 千 directly precedes powers of 万 or above, 一 is prefixed before 千.\n * @see https://en.wikipedia.org/wiki/Japanese_numerals#Large_numbers\n */\nexport default function int2ja(input, options = defaultOptions) {\n    if (!isValidInput(input, options.throwError))\n        return '';\n    const integer = Number(input);\n    const quads = toChunks(integer, 4);\n    const quadPhrases = quads.map(quad => toQuadPhrase(quad));\n    return joinQuadPhrases(quadPhrases);\n}\n/**\n * Convert quad-digits to a place value phrase.\n *\n * Quad   | Phrase\n * -------|-----------------\n * `0000` | \"\"\n * `0001` | \"一\"\n * `1000` | \"千\"\n * `1111` | \"千百十一\"\n * `1121` | \"千百二十一\"\n * `1321` | \"千三百二十一\"\n * `4321` | \"四千三百二十一\"\n */\nfunction toQuadPhrase(quad) {\n    const [digit4, digit3, digit2, digit1] = quad;\n    const word4 = toWord(digit4, 4);\n    const word3 = toWord(digit3, 3);\n    const word2 = toWord(digit2, 2);\n    const word1 = toWord(digit1, 1);\n    return `${word4}${word3}${word2}${word1}`;\n}\nfunction toWord(digit, place) {\n    const placeIndex = place - 1;\n    if (placeIndex === 0)\n        return CHAR[digit];\n    if (digit === 0)\n        return '';\n    if (digit === 1)\n        return SMALL_POWER[placeIndex];\n    return CHAR[digit] + (SMALL_POWER[placeIndex]);\n}\n/**\n * Add power words to triplet phrases and join.\n *\n *  Input       | Output\n *  :-----------|:--------\n * `[\"一\"]`     | \"一\"\n * `[\"\", \"一\"]` | \"一万\"\n * `[\"\", \"千\"]` | \"一千万\"\n */\nfunction joinQuadPhrases(phrases) {\n    let joinedPhrase = '';\n    phrases.forEach((phrase, index) => {\n        /**\n         * The valid integer range is significantly smaller than the largest power\n         * word.\n         */\n        // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n        const powerWord = LARGE_POWER[index];\n        if (powerWord !== '' && phrase === '千') {\n            joinedPhrase = '一' + phrase + powerWord + joinedPhrase;\n        }\n        else {\n            joinedPhrase = phrase + powerWord + joinedPhrase;\n        }\n    });\n    return joinedPhrase || '零';\n}\n//# sourceMappingURL=japanese.js.map","import isValidInput, {} from './util/isValidInput.js';\nimport { toChunks } from './util/chunkDigits.js';\nconst ONES = [\n    '', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight', 'nine', 'ten',\n    'eleven', 'twelve', 'thirteen', 'fourteen', 'fifteen', 'sixteen', 'seventeen', 'eighteen', 'nineteen'\n];\nconst TENS = [\n    '', '', 'twenty', 'thirty', 'forty', 'fifty', 'sixty', 'seventy', 'eighty', 'ninety'\n];\nconst POWER = [\n    '', 'thousand', 'million', 'billion', 'trillion', 'quadrillion', 'quintillion', 'sextillion', 'septillion', 'octillion',\n    'nonillion'\n];\nconst defaultOptions = {\n    throwError: false,\n};\n/**\n * Convert integer into an English number phrase.\n *\n * Input | Output\n * ------|-------------\n * `0`   | `zero`\n * `1`   | `one`\n * `11`  | `eleven`\n * `21`  | `twenty-one`\n */\nexport default function int2en(input, options = defaultOptions) {\n    if (!isValidInput(input, options.throwError))\n        return '';\n    const integer = Number(input);\n    const triplets = toChunks(integer, 3);\n    const tripletPhrases = triplets.map(triplet => toTripletPhrase(triplet));\n    return joinTripletPhrases(tripletPhrases);\n}\n/**\n * Convert triplet-digits to a place value phrase.\n *\n * Triplet | Phrase\n * --------|:--------------------------\n * `001`   | \"one\"\n * `011`   | \"eleven\"\n * `021`   | \"twenty-one\"\n * `301`   | \"three hundred one\"\n * `311`   | \"three hundred eleven\"\n * `321`   | \"three hundred twenty-one\"\n */\nfunction toTripletPhrase(triplet) {\n    const [digit3, digit2, digit1] = triplet;\n    const phrase = [];\n    if (digit3 !== 0) {\n        phrase.push(`${ONES[digit3]} hundred`);\n    }\n    switch (digit2) {\n        case 0:\n            if (digit1 !== 0) {\n                phrase.push(ONES[digit1]);\n            }\n            break;\n        case 1:\n            phrase.push(ONES[10 + digit1]);\n            break;\n        default:\n            if (digit1 === 0) {\n                phrase.push(TENS[digit2]);\n            }\n            else {\n                phrase.push(`${TENS[digit2]}-${ONES[digit1]}`);\n            }\n            break;\n    }\n    return phrase.join(' ');\n}\n/**\n * Add power words to triplet phrases and join.\n *\n *  Input           | Output\n *  :---------------|:------------------\n * `[\"\", \"one\"]`    | \"one thousand\"\n * `[\"one\", \"one\"]` | \"one thousand one\"\n */\nfunction joinTripletPhrases(phrases) {\n    const joinedPhrase = [];\n    phrases.forEach((phrase, index) => {\n        if (phrase === '')\n            return;\n        /**\n         * The valid integer range is significantly smaller than the largest power\n         * word.\n         */\n        // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n        const powerWord = POWER[index];\n        const phraseWithPowerWord = (powerWord === '') ? phrase : `${phrase} ${powerWord}`;\n        joinedPhrase.push(phraseWithPowerWord);\n    });\n    return joinedPhrase.reverse().join(' ') || 'zero';\n}\n//# sourceMappingURL=english.js.map"],"names":["CoercionError","Error","constructor","message","name","isValidInput","input","throwError","notValid","makeNotValid","isNaN","Number","isValidNumber","isInteger","MAX_SAFE_INTEGER","error","console","toString","toChunks","integer","targetLength","chunks","reversedDigits","String","split","reverse","index","reversedChunk","slice","chunk","length","push","toChunkDigits","pad","Array","fill","paddedChunk","map","s","CHAR","SMALL_POWER","LARGE_POWER","defaultOptions","int2ja","options","arguments","undefined","quads","quadPhrases","quad","toQuadPhrase","joinQuadPhrases","digit4","digit3","digit2","digit1","word4","toWord","word3","word2","word1","digit","place","placeIndex","phrases","joinedPhrase","forEach","phrase","powerWord","ONES","TENS","POWER","int2en","triplets","tripletPhrases","triplet","toTripletPhrase","joinTripletPhrases","join","phraseWithPowerWord"],"mappings":";;;;IAAM,MAAOA,aAAc,SAAQC,KAAK,CAAA;IACtCC,EAAAA,WAAAA,CAAYC,OAAe,EAAA;QACzB,KAAK,CAACA,OAAO,CAAC;QACd,IAAI,CAACC,IAAI,GAAG,eAAe;IAC7B;;IAKY,SAAUC,YAAYA,CAACC,KAAY,EAAEC,UAAmB,EAAA;IACpE,EAAA,MAAMC,QAAQ,GAAGC,YAAY,CAACF,UAAU,CAAC;IAEzC,EAAA,IAAI,OAAOD,KAAK,KAAK,QAAQ,EAAE;QAC7B,IAAIA,KAAK,KAAK,EAAE,EAAE,OAAOE,QAAQ,CAAC,8BAA8B,CAAC;IACjE,IAAA,IAAIE,KAAK,CAACC,MAAM,CAACL,KAAK,CAAC,CAAC,EAAE,OAAOE,QAAQ,CAAC,2BAA2B,CAAC;QACtE,OAAOI,aAAa,CAACD,MAAM,CAACL,KAAK,CAAC,EAAEE,QAAQ,CAAC;IAC/C;IACA,EAAA,IAAI,OAAOF,KAAK,KAAK,QAAQ,EAAE;IAC7B,IAAA,OAAOM,aAAa,CAACN,KAAK,EAAEE,QAAQ,CAAC;IACvC;MACA,OAAOA,QAAQ,CAAC,8BAA8B,CAAC;IACjD;IAEA,SAASI,aAAaA,CAACN,KAAa,EAAEE,QAAoC,EAAA;IACxE,EAAA,IAAI,CAACG,MAAM,CAACE,SAAS,CAACP,KAAK,CAAC,EAC1B,OAAOE,QAAQ,CAAC,sBAAsB,CAAC;MACzC,IAAIF,KAAK,GAAG,CAAC,EACX,OAAOE,QAAQ,CAAC,8BAA8B,CAAC;IACjD,EAAA,IAAIF,KAAK,GAAGK,MAAM,CAACG,gBAAgB,EACjC,OAAON,QAAQ,CAAC,CAAyBG,sBAAAA,EAAAA,MAAM,CAACG,gBAAgB,iBAAiB,CAAC;IACpF,EAAA,OAAO,IAAI;IACb;IAEA,SAASL,YAAYA,CAACF,UAAmB,EAAA;MACvC,OAAO,SAASC,QAAQA,CAACL,OAAe,EAAA;IACtC,IAAA,MAAMY,KAAK,GAAG,IAAIf,aAAa,CAACG,OAAO,CAAC;IACxC,IAAA,IAAII,UAAU,EAAE;IACd,MAAA,MAAMQ,KAAK;IACb,KAAC,MAAM;IACLC,MAAAA,OAAO,CAACD,KAAK,CAACA,KAAK,CAACE,QAAQ,EAAE,CAAC;IAC/B,MAAA,OAAO,KAAK;IACd;OACD;IACH;;ICzCA;;;;;;IAMM,SAAUC,QAAQA,CAAoBC,OAAe,EAAEC,YAAoB,EAAA;MAC/E,MAAMC,MAAM,GAAQ,EAAE;IACtB,EAAA,MAAMC,cAAc,GAAGC,MAAM,CAACJ,OAAO,CAAC,CAACK,KAAK,CAAC,EAAE,CAAC,CAACC,OAAO,EAAE;MAC1D,KAAK,IAAIC,KAAK,GAAG,CAAC,GAAIA,KAAK,IAAIN,YAAY,EAAE;QAC3C,MAAMO,aAAa,GAAGL,cAAc,CAACM,KAAK,CAACF,KAAK,EAAEA,KAAK,GAAGN,YAAY,CAAC;IACvE,IAAA,MAAMS,KAAK,GAAGF,aAAa,CAACF,OAAO,EAAE;IACrC,IAAA,IAAII,KAAK,CAACC,MAAM,KAAKV,YAAY,EAAE;IACjCC,MAAAA,MAAM,CAACU,IAAI,CAACC,aAAa,CAACH,KAAK,CAAM,CAAC;IACxC,KAAC,MAAM;IACL,MAAA,IAAIA,KAAK,CAACC,MAAM,GAAG,CAAC,EAAE;IACpB,QAAA,MAAMG,GAAG,GAAGC,KAAK,CAASd,YAAY,GAAGS,KAAK,CAACC,MAAM,CAAC,CAACK,IAAI,CAAC,GAAG,CAAC;YAChE,MAAMC,WAAW,GAAG,CAAC,GAAGH,GAAG,EAAE,GAAGJ,KAAK,CAAC;IACtCR,QAAAA,MAAM,CAACU,IAAI,CAACC,aAAa,CAACI,WAAW,CAAM,CAAC;IAC9C;IACA,MAAA;IACF;IACF;IACA,EAAA,OAAOf,MAAM;IACf;IAEA;;;IAGA,SAASW,aAAaA,CAACH,KAAe,EAAA;MACpC,OAAOA,KAAK,CAACQ,GAAG,CAACC,CAAC,IAAI3B,MAAM,CAAC2B,CAAC,CAAC,CAAY;IAC7C;;IC1BA,MAAMC,IAAI,GAAG,CAAC,EAAE,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,CAAU;IACvE,MAAMC,WAAW,GAAG,CAAC,EAAE,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,CAAU;IAChD,MAAMC,WAAW,GAAG,CAAC,EAAE,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,IAAI,EAAE,GAAG,CAAU;IACrE,MAAMC,gBAAc,GAAG;IACrBnC,EAAAA,UAAU,EAAE;IACb,CAAA;IAED;;;;;;;;;;;;;;;;IAgBc,SAAUoC,MAAMA,CAACrC,KAAY,EAA0B;IAAA,EAAA,IAAxBsC,OAAO,GAAAC,SAAA,CAAAf,MAAA,GAAA,CAAA,IAAAe,SAAA,CAAA,CAAA,CAAA,KAAAC,SAAA,GAAAD,SAAA,CAAA,CAAA,CAAA,GAAGH,gBAAc;MACnE,IAAI,CAACrC,YAAY,CAACC,KAAK,EAAEsC,OAAO,CAACrC,UAAU,CAAC,EAAE,OAAO,EAAE;IACvD,EAAA,MAAMY,OAAO,GAAGR,MAAM,CAACL,KAAK,CAAC;IAC7B,EAAA,MAAMyC,KAAK,GAAG7B,QAAQ,CAAOC,OAAO,EAAE,CAAC,CAAC;IACxC,EAAA,MAAM6B,WAAW,GAAGD,KAAK,CAACV,GAAG,CAACY,IAAI,IAAIC,YAAY,CAACD,IAAI,CAAC,CAAC;MACzD,OAAOE,eAAe,CAACH,WAAW,CAAC;IACrC;IAEA;;;;;;;;;;;;;IAaA,SAASE,YAAYA,CAACD,IAAU,EAAA;MAC9B,MAAM,CAACG,MAAM,EAAEC,MAAM,EAAEC,MAAM,EAAEC,MAAM,CAAC,GAAGN,IAAI;IAC7C,EAAA,MAAMO,KAAK,GAAGC,MAAM,CAACL,MAAM,EAAE,CAAC,CAAC;IAC/B,EAAA,MAAMM,KAAK,GAAGD,MAAM,CAACJ,MAAM,EAAE,CAAC,CAAC;IAC/B,EAAA,MAAMM,KAAK,GAAGF,MAAM,CAACH,MAAM,EAAE,CAAC,CAAC;IAC/B,EAAA,MAAMM,KAAK,GAAGH,MAAM,CAACF,MAAM,EAAE,CAAC,CAAC;MAC/B,OAAO,CAAA,EAAGC,KAAK,CAAGE,EAAAA,KAAK,GAAGC,KAAK,CAAA,EAAGC,KAAK,CAAE,CAAA;IAC3C;IAEA,SAASH,MAAMA,CAACI,KAAY,EAAEC,KAAY,EAAA;IACxC,EAAA,MAAMC,UAAU,GAAGD,KAAK,GAAG,CAAe;MAC1C,IAAIC,UAAU,KAAK,CAAC,EAAE,OAAOxB,IAAI,CAACsB,KAAK,CAAC;IACxC,EAAA,IAAIA,KAAK,KAAK,CAAC,EAAE,OAAO,EAAE;MAC1B,IAAIA,KAAK,KAAK,CAAC,EAAE,OAAOrB,WAAW,CAACuB,UAAU,CAAC;MAC/C,OAAOxB,IAAI,CAACsB,KAAK,CAAC,GAAIrB,WAAW,CAACuB,UAAU,CAAE;IAChD;IAEA;;;;;;;;;IASA,SAASZ,eAAeA,CAACa,OAAiB,EAAA;MACxC,IAAIC,YAAY,GAAG,EAAE;IACrBD,EAAAA,OAAO,CAACE,OAAO,CAAC,CAACC,MAAM,EAAEzC,KAAK,KAAI;IAChC;;;;IAIA;IACA,IAAA,MAAM0C,SAAS,GAAG3B,WAAW,CAACf,KAAK,CAAE;IACrC,IAAA,IAAI0C,SAAS,KAAK,EAAE,IAAID,MAAM,KAAK,GAAG,EAAE;IACtCF,MAAAA,YAAY,GAAG,GAAG,GAAGE,MAAM,GAAGC,SAAS,GAAGH,YAAY;IACxD,KAAC,MAAM;IACLA,MAAAA,YAAY,GAAGE,MAAM,GAAGC,SAAS,GAAGH,YAAY;IAClD;IACF,GAAC,CAAC;MACF,OAAOA,YAAY,IAAI,GAAG;IAC5B;;ICrFA,MAAMI,IAAI,GAAG,CACT,EAAE,EAAE,KAAK,EAAE,KAAK,EAAE,OAAO,EAAE,MAAM,EAAE,MAAM,EAAE,KAAK,EAAE,OAAO,EAAE,OAAO,EAAE,MAAM,EAAE,KAAK,EACjF,QAAQ,EAAE,QAAQ,EAAE,UAAU,EAAE,UAAU,EAAE,SAAS,EAAE,SAAS,EAAE,WAAW,EAAE,UAAU,EAAE,UAAU,CAC7F;IACZ,MAAMC,IAAI,GAAG,CACT,EAAE,EAAE,EAAE,EAAE,QAAQ,EAAE,QAAQ,EAAE,OAAO,EAAE,OAAO,EAAE,OAAO,EAAE,SAAS,EAAE,QAAQ,EAAE,QAAQ,CAC5E;IACZ,MAAMC,KAAK,GAAG,CACV,EAAE,EAAE,UAAU,EAAE,SAAS,EAAE,SAAS,EAAE,UAAU,EAAE,aAAa,EAAE,aAAa,EAAE,YAAY,EAAE,YAAY,EAAE,WAAW,EACvH,WAAW,CACH;IACZ,MAAM7B,cAAc,GAAG;IACrBnC,EAAAA,UAAU,EAAE;IACb,CAAA;IAED;;;;;;;;;;IAUc,SAAUiE,MAAMA,CAAClE,KAAY,EAA0B;IAAA,EAAA,IAAxBsC,OAAO,GAAAC,SAAA,CAAAf,MAAA,GAAA,CAAA,IAAAe,SAAA,CAAA,CAAA,CAAA,KAAAC,SAAA,GAAAD,SAAA,CAAA,CAAA,CAAA,GAAGH,cAAc;MACnE,IAAI,CAACrC,YAAY,CAACC,KAAK,EAAEsC,OAAO,CAACrC,UAAU,CAAC,EAAE,OAAO,EAAE;IACvD,EAAA,MAAMY,OAAO,GAAGR,MAAM,CAACL,KAAK,CAAC;IAC7B,EAAA,MAAMmE,QAAQ,GAAGvD,QAAQ,CAAUC,OAAO,EAAE,CAAC,CAAC;IAC9C,EAAA,MAAMuD,cAAc,GAAGD,QAAQ,CAACpC,GAAG,CAACsC,OAAO,IAAIC,eAAe,CAACD,OAAO,CAAC,CAAC;MACxE,OAAOE,kBAAkB,CAACH,cAAc,CAAC;IAC3C;IAEA;;;;;;;;;;;;IAYA,SAASE,eAAeA,CAACD,OAAgB,EAAA;MACvC,MAAM,CAACtB,MAAM,EAAEC,MAAM,EAAEC,MAAM,CAAC,GAAGoB,OAAO;MACxC,MAAMR,MAAM,GAAa,EAAE;MAC3B,IAAId,MAAM,KAAK,CAAC,EAAE;QAChBc,MAAM,CAACpC,IAAI,CAAC,CAAA,EAAGsC,IAAI,CAAChB,MAAM,CAAC,CAAA,QAAA,CAAU,CAAC;IACxC;IACA,EAAA,QAAQC,MAAM;IACZ,IAAA,KAAK,CAAC;UACJ,IAAIC,MAAM,KAAK,CAAC,EAAE;IAChBY,QAAAA,MAAM,CAACpC,IAAI,CAACsC,IAAI,CAACd,MAAM,CAAC,CAAC;IAC3B;IACA,MAAA;IACF,IAAA,KAAK,CAAC;UACJY,MAAM,CAACpC,IAAI,CAACsC,IAAI,CAAC,EAAE,GAAGd,MAAmB,CAAC,CAAC;IAC3C,MAAA;IACF,IAAA;UACE,IAAIA,MAAM,KAAK,CAAC,EAAE;IAChBY,QAAAA,MAAM,CAACpC,IAAI,CAACuC,IAAI,CAAChB,MAAM,CAAC,CAAC;IAC3B,OAAC,MAAM;IACLa,QAAAA,MAAM,CAACpC,IAAI,CAAC,CAAA,EAAGuC,IAAI,CAAChB,MAAM,CAAC,CAAA,CAAA,EAAIe,IAAI,CAACd,MAAM,CAAC,EAAE,CAAC;IAChD;IACA,MAAA;IACJ;IACA,EAAA,OAAOY,MAAM,CAACW,IAAI,CAAC,GAAG,CAAC;IACzB;IAEA;;;;;;;;IAQA,SAASD,kBAAkBA,CAACb,OAAiB,EAAA;MAC3C,MAAMC,YAAY,GAAa,EAAE;IACjCD,EAAAA,OAAO,CAACE,OAAO,CAAC,CAACC,MAAM,EAAEzC,KAAK,KAAI;QAChC,IAAIyC,MAAM,KAAK,EAAE,EAAE;IACnB;;;;IAIA;IACA,IAAA,MAAMC,SAAS,GAAGG,KAAK,CAAC7C,KAAK,CAAE;IAC/B,IAAA,MAAMqD,mBAAmB,GAAIX,SAAS,KAAK,EAAE,GAAID,MAAM,GAAG,CAAGA,EAAAA,MAAM,CAAIC,CAAAA,EAAAA,SAAS,CAAE,CAAA;IAClFH,IAAAA,YAAY,CAAClC,IAAI,CAACgD,mBAAmB,CAAC;IACxC,GAAC,CAAC;MACF,OAAOd,YAAY,CAACxC,OAAO,EAAE,CAACqD,IAAI,CAAC,GAAG,CAAC,IAAI,MAAM;IACnD;;;;;;;;;;;;;"}